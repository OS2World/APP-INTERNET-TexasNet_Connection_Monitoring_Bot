head	1.16;
access;
symbols;
locks
	db:1.16; strict;
comment	@ * @;


1.16
date	97.05.26.16.14.07;	author db;	state Exp;
branches;
next	1.15;

1.15
date	97.04.23.16.37.57;	author db;	state Exp;
branches;
next	1.14;

1.14
date	97.04.14.17.07.26;	author db;	state Exp;
branches;
next	1.13;

1.13
date	97.04.03.21.10.55;	author db;	state Exp;
branches;
next	1.12;

1.12
date	97.04.02.20.17.15;	author db;	state Exp;
branches;
next	1.11;

1.11
date	97.03.09.05.39.52;	author db;	state Exp;
branches;
next	1.10;

1.10
date	97.03.07.21.22.14;	author db;	state Exp;
branches;
next	1.9;

1.9
date	97.03.07.18.47.48;	author db;	state Exp;
branches;
next	1.8;

1.8
date	97.03.06.17.57.41;	author db;	state Exp;
branches;
next	1.7;

1.7
date	97.01.05.18.18.03;	author db;	state Exp;
branches;
next	1.6;

1.6
date	97.01.01.01.43.00;	author db;	state Exp;
branches;
next	1.5;

1.5
date	96.12.18.01.55.37;	author db;	state Exp;
branches;
next	1.4;

1.4
date	96.12.16.01.29.39;	author db;	state Exp;
branches;
next	1.3;

1.3
date	96.12.15.22.15.19;	author db;	state Exp;
branches;
next	1.2;

1.2
date	96.12.15.20.57.01;	author db;	state Exp;
branches;
next	1.1;

1.1
date	96.12.09.00.36.43;	author db;	state Exp;
branches;
next	;


desc
@userlist.c as used in tcm-dianora
@


1.16
log
@added NEXT support for strdup()
@
text
@/*
  Some changes made by Dianora

  - added clear_userlist()
  - make it actually use MAXUSERS defined in config.h
  - added config file for bot nick, channel, server, port etc.
  - rudimentary remote tcm linking added
*/

#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include "config.h"
#include "tcm.h"

static char *version="$Id: userlist.c,v 1.15 1997/04/23 16:37:57 db Exp db $";

#ifdef NEXT
char *strdup(char *);
#endif

AUTH_FILE_ENTRY userlist[MAXUSERS];
BOT_FILE_ENTRY botlist[MAXBOTS];

char *hostlist[MAXHOSTS];

int  user_list_index;

char username_config[MAX_CONFIG];
char virtual_host_config[MAX_CONFIG];
char oper_nick_config[MAX_CONFIG];
char oper_pass_config[MAX_CONFIG];
char server_config[MAX_CONFIG];
char server_name[MAX_CONFIG];
char server_port[MAX_CONFIG];
char port_config[MAX_CONFIG];
char ircname_config[MAX_CONFIG];
char email_config[MAX_CONFIG];
int  tcm_port;

extern char defchannel[];
extern char dfltnick[];
extern CONNECTION connections[];

/*
load_config_file

inputs		- NONE
output		- NONE
side effects	- configuration items needed for tcm are loaded
		  from CONFIG_FILE
		  rudimentary error checking in config file are reported
		  and if any found, tcm is terminated...
*/

void load_config_file(file_name)
char *file_name;
{
  FILE *fp;
  char line[MAX_BUFF];
  char *key;
  char *value;
  char *p;
  int error_in_config;

  error_in_config = NO;

  username_config[0] = '\0';
  virtual_host_config[0] = '\0';
  oper_nick_config[0] = '\0';
  oper_pass_config[0] = '\0';
  server_config[0] = '\0';
  ircname_config[0] = '\0';
  defchannel[0] = '\0';
  dfltnick[0] = '\0';
  email_config[0] = '\0';

  if( (fp = fopen(file_name,"r")) == (FILE *)NULL)
    {
      fprintf(stderr,"GACK! I don't know who I am or anything!!\n");
      fprintf(stderr,"tcm-dianora can't find %s file\n",file_name);
      exit(1);
    }

  tcm_port = TCM_PORT;

  while(fgets(line, MAX_BUFF-1,fp))
    {
      if(line[0] == '#')
	continue;

      key = strtok(line,":");
      if(key == (char *)NULL)
	continue;
      value = strtok((char *)NULL,"\r\n");
      if(value == (char *)NULL)
	continue;

      switch(*key)
	{
	case 'e':case 'E':
          strncpy(email_config,value,MAX_CONFIG-1);
          (void)printf("email address = [%s]\n", value );
	break;

	case 'o':case 'O':
	  {
	    char *oper_nick;
	    char *oper_pass;

	    oper_nick = strtok(value,":\r\n");
	    oper_pass = strtok((char *)NULL,":\r\n");
	    if(oper_nick == (char *)NULL)
	      continue;
	    if(oper_pass == (char *)NULL)
	      continue;

	    printf("oper nick = [%s]\n", oper_nick );
	    printf("oper pass = [%s]\n", oper_pass );
	    strncpy(oper_nick_config,oper_nick,MAX_NICK);
	    strncpy(oper_pass_config,oper_pass,MAX_CONFIG-1);
	  }
	  break;

	case 'p':case 'P':
	  tcm_port = atoi(value);
	  break;

	case 'u':case 'U':
	  printf("user name = [%s]\n", value );
	  strncpy(username_config,value,MAX_CONFIG-1);
	  break;

	case 'v':case 'V':
	  printf("virtual host name = [%s]\n", value );
	  strncpy(virtual_host_config,value,MAX_CONFIG-1);
	  break;

	case 's':case 'S':
	  {
	    printf("server = [%s]\n", value);
	    strncpy(server_config,value,MAX_CONFIG-1);
	  }
	  break;

	case 'n':case 'N':
	  printf("nick for bot = [%s]\n", value );
	  strncpy(dfltnick,value,MAX_NICK-1);
	  break;

	case 'i':case 'I':
	  printf("IRCNAME = [%s]\n", value );
	  strncpy(ircname_config,value,MAX_CONFIG-1);
	  break;

	case 'c':case 'C':
	  printf("Channel = [%s]\n", value);
	  strncpy(defchannel,value,MAX_CHANNEL-1);
	  break;

	default:
	  break;
	}
    }

  if(username_config[0] == '\0')
    {
      fprintf(stderr,"I need a username (U:) in %s\n",CONFIG_FILE);
      error_in_config = YES;
    }

  if(oper_nick_config[0] == '\0')
    {
      fprintf(stderr,"I need an opernick (O:) in %s\n",CONFIG_FILE);
      error_in_config = YES;
    }

  if(oper_pass_config[0] == '\0')
    {
      fprintf(stderr,"I need an operpass (O:) in %s\n",CONFIG_FILE);
      error_in_config = YES;
    }

  if(server_config[0] == '\0')
    {
      fprintf(stderr,"I need a server (S:) in %s\n",CONFIG_FILE);
      error_in_config = YES;
    }

  strncpy(server_name,server_config,MAX_CONFIG);
  p = strchr(server_name,':');
  if(p)
    {
      *p = '\0';
      p++;
      strncpy(server_port,p,MAX_CONFIG);
    }

  if(ircname_config[0] == '\0')
    {
      fprintf(stderr,"I need an ircname (I:) in %s\n",CONFIG_FILE);
      error_in_config = YES;
    }

  if(dfltnick[0] == '\0')
    {
      fprintf(stderr,"I need a nick (N:) in %s\n", CONFIG_FILE);
      error_in_config = YES;
    }

  if(error_in_config)
    exit(1);
}

/*
load_userlist

inputs		- NONE
output		- NONE
side effects	- first part of oper list is loaded from file
*/

void load_userlist()
{
  FILE *userfile;
  char line[MAX_BUFF];

  if ( (userfile = fopen(USERLIST_FILE,"r")) == (FILE *)NULL )
    {
      printf("Cannot read userlist.load\n");
      /* As I am going to read the rest from a stats O , this is ok */
      return;
    }

/*

  userlist.load looks like now
  u@@h:nick:password:ok o for opers, k for remote kline

- or you can use a number 1 for opers, 2 for remote kline -
i.e.
  u@@h:nick:password:3 for opers

  h:nick:password:okb o for opers, 2 for remote kline, b for bot

- 4 is for bot -
i.e.
  h:nick:password:7   for remote tcm's

*/

  while (fgets(line, MAX_BUFF-1, userfile) )
    {
      char *userathost;
      char *usernick;
      char *password;
      char *type;

      line[strlen(line)-1] = 0;

      if(line[0] == '#')
	continue;

      userathost = strtok(line,":");
      if( userathost == (char *)NULL)
	continue;

#ifdef DEBUGV4
      printf("userlist.c userathost = %s\n", userathost );
#endif

      userlist[user_list_index].usernick = (char *)NULL;
      userlist[user_list_index].password = (char *)NULL;

      userlist[user_list_index].userathost = strdup(userathost);

      if(userlist[user_list_index].userathost == (char *)NULL)
	{
	  fprintf(stderr,"memory allocation error in load_userlist()\n");
	  exit(1);
	}

      usernick = strtok((char *)NULL,":");

      if(usernick)
	{
	  userlist[user_list_index].usernick = strdup(usernick);
	  if(userlist[user_list_index].usernick == (char *)NULL)
	    {
	      fprintf(stderr,"memory allocation error in load_userlist()\n");
	      exit(1);
	    }
	}

      password = strtok((char *)NULL,":");

      if(password)
	{
	  userlist[user_list_index].password = strdup(password);
	  if(userlist[user_list_index].password == (char *)NULL)
	    {
	      fprintf(stderr,"memory allocation error in load_userlist()\n");
	      exit(1);
	    }
	}

      type = strtok((char *)NULL,":");

      if(type)
	{
	  int type_int;
	  char *p;
	  p = type;

	  type_int = 0;

	  /*
	    If you really want to use a decimal instead of the keys...
	   */

	  if(isdigit(*p))
	     {
	       type_int = atoi(p);
	     }
	  else
	    {
	      while(*p)
		{
		  switch(*p)
		    {
		    case 'o':
		    case 'O':
		      type_int |= TYPE_OPER;
		      break;

		    case 'g':
		    case 'G':
		      type_int |= (TYPE_GLINE|TYPE_REGISTERED);
		      break;

		    case 'k':
		    case 'K':
		      type_int |= TYPE_REGISTERED;
		      break;

		    case 'b':
		    case 'B':
		      type_int |= TYPE_BOT;
		      break;

		    default:
		      break;
		    }
		  p++;
		}
	    }
	  userlist[user_list_index].type = type_int;
#ifdef DEBUGV4
	  printf("userlist.c type = %s type_int = %d\n", type, type_int );
#endif
	}

      user_list_index++;
      if( user_list_index == (MAXUSERS - 1))
	break;
    }
  (void)fclose(userfile);

  userlist[user_list_index].userathost = (char *)NULL;
  userlist[user_list_index].usernick = (char *)NULL;
  userlist[user_list_index].password = (char *)NULL;
  userlist[user_list_index].type = 0;
}

/*
clear_userlist

input	- NONE
output	- NONE
side effects -
	  user list is cleared out prepatory to a userlist reload

	- Dianora
*/

void clear_userlist()
{
  int cnt;

  user_list_index = 0;

  for(cnt = 0; cnt < MAXUSERS; cnt++)
    {
      if(userlist[cnt].userathost == (char *)NULL)
	return;
      else
	{
	  (void)free(userlist[cnt].userathost);
	  userlist[cnt].userathost = (char *)NULL;
	  
	  if(userlist[cnt].usernick)
	    {
	      (void)free(userlist[cnt].usernick);
	      userlist[cnt].usernick = (char *)NULL;
	    }

	  if(userlist[cnt].password)
	    {
	      (void)free(userlist[cnt].password);
	      userlist[cnt].password = (char *)NULL;
	    }
	  userlist[cnt].type = 0;
	}
    }

  for(cnt = 0; cnt < MAXBOTS; cnt++)
    {
      if(botlist[cnt].userathost == (char *)NULL)
	return;
      else
	{
	  (void)free(botlist[cnt].userathost);
	  botlist[cnt].userathost = (char *)NULL;

	  if(botlist[cnt].theirnick)
	    {
	      (void)free(botlist[cnt].theirnick);
	      botlist[cnt].theirnick = (char *)NULL;
	    }

	  if(botlist[cnt].password)
	    {
	      (void)free(botlist[cnt].password);
	      botlist[cnt].password = (char *)NULL;
	    }
	  botlist[cnt].port = 0;
	}
    }
}

/*
load_botlist

inputs		- NONE
output		- NONE
side effects	- bot list is loaded from botlist.load file
*/

void load_botlist()
{
  FILE *botfile;
  int  bot_list_index;
  char line[MAX_BUFF];

  if ( (botfile = fopen(BOTLIST_FILE,"r")) == (FILE *)NULL)
    {
      printf("Cannot read botlist.load\n");
      return;
    }

/*

  botlist.load looks like now
  host:theirnick:password:port   for remote tcm's
*/

  bot_list_index = 0;

  while (fgets(line, MAX_BUFF-1, botfile) )
    {
      char *userathost;
      char *theirnick;
      char *password;
      char *port_string;
      int  port;

      line[strlen(line)-1] = 0;
      if(line[0] == '#')
	continue;

      userathost = strtok(line,":");
      if( userathost == (char *)NULL)
	continue;

#ifdef DEBUGV4
      printf("userlist.c loadbotlist userathost = %s\n", userathost );
#endif

      botlist[bot_list_index].theirnick = (char *)NULL;
      botlist[bot_list_index].password = (char *)NULL;

      botlist[bot_list_index].userathost = strdup(userathost);

      if(botlist[bot_list_index].userathost == (char *)NULL)
	{
	  fprintf(stderr,"memory allocation error in load_botlist()\n");
	  exit(1);
	}

      theirnick = strtok((char *)NULL,":");

      if(theirnick)
	{
	  botlist[bot_list_index].theirnick = strdup(theirnick);
	  if(botlist[bot_list_index].theirnick == (char *)NULL)
	    {
	      fprintf(stderr,"memory allocation error in load_botlist()\n");
	      exit(1);
	    }
	}

      password = strtok((char *)NULL,":");

      if(password)
	{
	  botlist[bot_list_index].password = strdup(password);
	  if(botlist[bot_list_index].password == (char *)NULL)
	    {
	      fprintf(stderr,"memory allocation error in load_botlist()\n");
	      exit(1);
	    }
	}

      port_string = strtok((char *)NULL,":");
      port = TCM_PORT;

      if(port_string)
	{
	  if(isdigit(*port_string))
	     {
	       port = atoi(port_string);
	     }

	}

      botlist[bot_list_index].port = port;
#ifdef DEBUGV4
      printf("userlist.c port = %d\n", port );
#endif

      bot_list_index++;
      if( bot_list_index == (MAXBOTS - 1))
	break;
    }
  (void)fclose(botfile);

  botlist[bot_list_index].userathost = (char *)NULL;
  botlist[bot_list_index].theirnick = (char *)NULL;
  botlist[bot_list_index].password = (char *)NULL;
  botlist[bot_list_index].port = 0;
}

/*
init_userlist

input	- NONE
output	- NONE
side effects -
	  user list is cleared 

	- Dianora
*/

void init_userlist()
{
  int cnt;
  user_list_index = 0;

  for(cnt = 0; cnt < MAXUSERS; cnt++)
    {
      userlist[cnt].userathost = (char *)NULL;
      userlist[cnt].usernick = (char *)NULL;
      userlist[cnt].password = (char *)NULL;
      userlist[cnt].type = 0;
    }

    for(cnt = 0; cnt < MAXBOTS; cnt++)
    {
      botlist[cnt].userathost = (char *)NULL;
      botlist[cnt].theirnick = (char *)NULL;
      botlist[cnt].password = (char *)NULL;
      botlist[cnt].port = 0;
    }
}

/*
isoper()

inputs		- user@@host name
output		- TYPE_OPER if oper, 0 if not
side effects	- NONE
*/

int isoper(userhost)
char *userhost;
{
  int i = -1;

  while (userlist[++i].userathost)
    {
      if((userlist[i].type & TYPE_BOT) == 0)
	if (!wldcmp(userlist[i].userathost,userhost))
	  return(TYPE_OPER);
    }
  return(0);
}

/*
islegal_pass()

inputs		- user@@host password
output		- YES if legal NO if not
side effects	- NONE
*/

int islegal_pass(userhost,password)
char *userhost;
char *password;
{
  int i = 0;

  while (userlist[i].userathost)
    {
      if(!(userlist[i].type & TYPE_BOT))
	{
	  if (wldcmp(userlist[i].userathost,userhost) == 0)
	    {
	      if(userlist[i].password)
		{
		  if(strcmp(userlist[i].password,password) == 0)
		    return(userlist[i].type);
		  else
		    return(0);
		}
	    }
	}
      i++;
    }
  return(0);
}

/*
islinkedbot()

inputs		- connection number, botname, password
output		- privs if linkedbot 0 if not
side effects	- NONE
*/

int islinkedbot(connnum,botname,password)
int connnum;
char *botname;
char *password;
{
  int i = 0;
  int j;

  while ((userlist[i].userathost) && (i < (MAXDCCCONNS -1)) )
    {
      if ( (userlist[i].type & TYPE_BOT) && 
	   (wldcmp(userlist[i].userathost,
		       connections[connnum].userhost) == 0) )
	{
	  if(userlist[i].usernick == (char *)NULL)
	    {
	      continue;
	    }

	  if(userlist[i].password == (char *)NULL)
	    continue;

	  if( (strcasecmp(botname,userlist[i].usernick) == 0 ) &&
	     (strcmp(password,userlist[i].password) == 0 ) )
	    {
	      /* 
		 Close any other duplicate connections using same botnick
	       */

	      for(j = 0; j < MAXDCCCONNS+1; j++)
		{
		  if(connections[j].userhost)
		     {
		       if(!strcasecmp(connections[j].nick,botname))
			 {
			   closeconn(j);
			 }
		     }
		}

	      strcpy(connections[connnum].nick,botname);
	      return(userlist[i].type);
	    }
	}
      i++;
    }
  return(0);
}

/*
  I've added Phishers auto kline code as an option - Dianora
*/

/* Added Allowable hostlist for autokline. Monitor checks allowed hosts
   before adding kline, if it matches, it just returns dianoras
   suggested kline.  Phisher dkemp@@frontiernet.net


okhost() is now called on nick floods etc. to mark whether a user
should be reported or not.. hence its not just for AUTO_KLINE now

*/

void load_hostlist()
{
  FILE *hostfile;
  char line[MAX_BUFF];
  int cnt = 0;

  if( (hostfile = fopen("hostlist.load","r")) == (FILE *)NULL )
    {
      printf("Cannot read hostlist.load\n");
      exit(1);
    }
    
  while (fgets(line, MAX_BUFF-1, hostfile) != NULL)
    {
      line[strlen(line)-1] = 0;

      hostlist[cnt] = strdup(line);
      if(hostlist[cnt] == (char *)NULL)
        {
          fprintf(stderr,"memory allocation error in load_hostlist()\n");
          exit(1);
        }
      cnt++;
    }
  fclose(hostfile);
  hostlist[cnt] = (char *)NULL;
}

/* Checks for ok hosts to block auto-kline - Phisher */

int okhost(userhost)
char *userhost;
{
  int i = -1;

  while (hostlist[++i])
    if (!wldcmp(hostlist[i],userhost))
      return(YES);
  return(NO);
}

@


1.15
log
@added .ignore .lignore
@
text
@d16 5
a20 1
static char *version="$Id: userlist.c,v 1.14 1997/04/14 17:07:26 db Exp db $";
@


1.14
log
@checkpoint
@
text
@d12 1
d16 1
a16 1
static char *version="$Id: userlist.c,v 1.13 1997/04/03 21:10:55 db Exp db $";
d334 1
a334 1
		      type_int |= TYPE_GLINE;
@


1.13
log
@glines added
@
text
@d15 1
a15 1
static char *version="$Id: userlist.c,v 1.12 1997/04/02 20:17:15 db Exp db $";
a19 1
#ifdef AUTOPILOT
a20 1
#endif
d34 1
d80 2
d120 4
d331 5
a622 1
	      printf("found match on userathost\n");
a697 2
#ifdef AUTOPILOT

d700 7
a706 1
   suggested kline.  Phisher dkemp@@frontiernet.net */
d748 1
a748 1
#endif
@


1.12
log
@checkpoint, tons of changes remote bot linking etc.
@
text
@d15 1
a15 3
static char *version="$Id: userlist.c,v 1.11 1997/03/09 05:39:52 db Exp db $";

AUTH_FILE_ENTRY botlist[MAXBOTS];
d18 1
d410 1
a410 1
	  if(userlist[cnt].usernick)
d412 2
a413 2
	      (void)free(userlist[cnt].usernick);
	      userlist[cnt].usernick = (char *)NULL;
d416 1
a416 1
	  if(userlist[cnt].password)
d418 2
a419 2
	      (void)free(userlist[cnt].password);
	      userlist[cnt].password = (char *)NULL;
d421 1
a421 1
	  userlist[cnt].type = 0;
d449 1
a449 1
  h:nick:password:port   for remote tcm's
d457 1
a457 1
      char *usernick;
d459 2
a460 1
      char *type;
d474 1
a474 1
      botlist[bot_list_index].usernick = (char *)NULL;
d485 1
a485 1
      usernick = strtok((char *)NULL,":");
d487 1
a487 1
      if(usernick)
d489 2
a490 2
	  botlist[bot_list_index].usernick = strdup(usernick);
	  if(botlist[bot_list_index].usernick == (char *)NULL)
d509 2
a510 1
      type = strtok((char *)NULL,":");
d512 1
a512 1
      if(type)
d514 1
a514 5
	  int port;

	  port = TCM_PORT;

	  if(isdigit(*type))
d516 1
a516 1
	       port = atoi(type);
d519 3
a521 1
	  botlist[bot_list_index].type = port;
d523 1
a523 1
	  printf("userlist.c port = %d\n", port );
a524 1
	}
d533 1
a533 1
  botlist[bot_list_index].usernick = (char *)NULL;
d535 1
a535 1
  botlist[bot_list_index].type = 0;
d565 1
a565 1
      botlist[cnt].usernick = (char *)NULL;
d567 1
a567 1
      botlist[cnt].type = 0;
d585 5
a589 2
    if (!wldcmp(userlist[i].userathost,userhost))
      return(TYPE_OPER);
a606 2
printf("islegal_pass userhost = %s\npassword = %s\n",userhost,password);

d609 1
a609 1
      if (wldcmp(userlist[i].userathost,userhost) == 0)
d611 1
a611 2
	  printf("found match on userathost\n");
	  if(userlist[i].password)
d613 8
a620 4
	      if(strcmp(userlist[i].password,password) == 0)
		return(userlist[i].type);
	      else
		return(0);
d629 1
a629 1
aislinkedbot()
d632 1
a632 1
output		- YES if linkedbot NO if not
a640 1
  char bot_nick[MAX_NICK+2];
d642 1
a642 4

  strcpy(bot_nick,"-");
  strncat(bot_nick,botname,MAX_NICK-1);
  strcat(bot_nick,"-");
d647 1
a647 1
	   (strcasecmp(userlist[i].userathost,
d661 5
a665 1
	      for(i = 0; i < MAXDCCCONNS+1; i++)
d667 1
a667 1
		  if(connections[i].userhost)
d669 1
a669 1
		       if(!strcasecmp(connections[i].nick,bot_nick))
d671 1
a671 1
			   closeconn(i);
d676 2
a677 2
	      strcpy(connections[connnum].nick,bot_nick);
	      return(TYPE_BOT|TYPE_OPER|TYPE_REGISTERED);
d695 10
a704 9
void load_hostlist() {
    FILE *hostfile;
    char line[MAX_BUFF];
    int cnt = 0;

    hostfile = fopen("hostlist.load","r");
    if (!hostfile) {
        printf("Cannot read hostlist.load\n");
        exit(1);
d707 1
a707 1
    while (fgets(line, MAX_BUFF-1, hostfile) != NULL)
@


1.11
log
@added 'v' flag for virtual host support
@
text
@d7 1
a7 1
  - preliminary bot linking code
d15 1
a15 1
static char *version="$Id: userlist.c,v 1.10 1997/03/07 21:22:14 db Exp db $";
d17 3
a19 2
char *userlist[MAXUSERS];
char *botlist[MAXBOTS];
d32 2
d40 1
d60 1
d181 9
d219 1
a219 2
  userfile = fopen("userlist.load","r");
  if (!userfile)
d226 18
a243 1
  while (fgets(line, MAX_BUFF-1, userfile) != NULL)
d245 5
d251 18
a268 3
      
      userlist[user_list_index] = strdup(line);
      if(userlist[user_list_index] == (char *)NULL)
d273 76
d353 6
a358 2
  fclose(userfile);
  userlist[user_list_index] = (char *)NULL;
d380 1
a380 1
      if(userlist[cnt] == (char *)NULL)
d384 15
a398 2
	  (void)free(userlist[cnt]);
	  userlist[cnt] = (char *)NULL;
d404 1
a404 1
      if(botlist[cnt] == (char *)NULL)
d408 118
a525 2
	  (void)free(botlist[cnt]);
	  botlist[cnt] = (char *)NULL;
d527 4
d532 6
d558 4
a561 1
      userlist[cnt] = (char *)NULL;
d564 6
a569 3
  for(cnt = 0; cnt < MAXBOTS; cnt++)
    {
      botlist[cnt] = (char *)NULL;
d577 1
a577 1
output		- YES if oper NO if not
d586 4
a589 4
  while (userlist[++i])
    if (!wldcmp(userlist[i],userhost))
      return(YES);
  return(NO);
d593 6
a598 1
islinkedbot()
d600 30
a629 1
inputs		- user@@host name
d634 4
a637 2
int islinkedbot(userhost)
char *userhost;
d639 20
a658 1
  int i = -1;
d660 21
a680 4
  while (botlist[++i])
    if (!wldcmp(botlist[i],userhost))
      return(YES);
  return(NO);
@


1.10
log
@many changes, fixed core dump problem with linux, added some early link code
@
text
@d15 1
a15 1
static char *version="$Id: userlist.c,v 1.9 1997/03/07 18:47:48 db Exp db $";
d31 1
@


1.9
log
@new struct entry
@
text
@d15 1
a15 1
static char *version="$Id: userlist.c,v 1.8 1997/03/06 17:57:41 db Exp db $";
d312 2
a313 2
      return 1;
  return 0;
d329 1
a329 1
  while (userlist[++i])
d331 2
a332 2
      return 1;
  return 0;
d381 2
a382 2
      return 1;
  return 0;
@


1.8
log
@added config file option at startup
@
text
@d7 1
d15 1
a15 1
static char *version="$Id: userlist.c,v 1.7 1997/01/05 18:18:03 db Exp db $";
d18 1
d27 1
d60 1
d119 5
d258 1
a258 2
#ifdef AUTOPILOT
  for(cnt = 0; cnt < MAXUSERS; cnt++ )
d260 1
a260 1
      if(userlist[cnt] == (char *)NULL)
d264 2
a265 2
	  (void)free(userlist[cnt]);
	  userlist[cnt] = (char *)NULL;
a267 1
#endif
d291 1
a291 2
#ifdef AUTOPILOT
  for(cnt = 0; cnt < MAXUSERS; cnt++ )
d293 1
a293 1
      userlist[cnt] = (char *)NULL;
a294 1
#endif
d297 9
a305 1
int istexasoper(userhost)
d316 19
d336 1
a336 1
  I've added Phishers auto kline code as an option
@


1.7
log
@changes to ensure hostlist.load is loaded for all AUTO KILL/KLINE modes
@
text
@d12 1
d14 1
a14 1
static char *version="$Id: userlist.c,v 1.6 1997/01/01 01:43:00 db Exp db $";
d45 2
a46 1
void load_config_file()
d65 1
a65 1
  if( (fp = fopen(CONFIG_FILE,"r")) == (FILE *)NULL)
d68 1
a68 1
      fprintf(stderr,"tcm-dianora is missing %s file\n",CONFIG_FILE);
@


1.6
log
@put userlist code back in
@
text
@d13 1
a13 1
static char *version="$Id: userlist.c,v 1.5 1996/12/18 01:55:37 db Exp db $";
d17 1
a17 1
#ifdef AUTO_KLINE
d247 1
a247 1
#ifdef AUTO_KLINE
d282 1
a282 1
#ifdef AUTO_KLINE
d305 1
a305 1
#ifdef AUTO_KLINE
@


1.5
log
@added email config
@
text
@d13 1
a13 1
static char *version="$Id: userlist.c,v 1.1 1996/12/09 00:36:43 db Exp db $";
d180 39
d241 4
a244 1
	(void)free(userlist[cnt]);
d253 4
a256 1
	(void)free(userlist[cnt]);
@


1.4
log
@AUTO_KLINE added
@
text
@d6 1
d28 1
d61 1
d84 5
@


1.3
log
@userlist fixes.
@
text
@d15 5
d83 8
a90 3
	    char *pass;
	    pass = strtok(value,":\r\n");
	    if(pass == (char *)NULL)
d92 5
a96 4
	    printf("oper nick = [%s]\n", value );
	    printf("oper pass = [%s]\n", pass );
	    strncpy(oper_nick_config,value,MAX_NICK);
	    strncpy(oper_pass_config,pass,MAX_CONFIG-1);
d189 9
d205 30
d247 51
@


1.2
log
@added config file tcm.cf
@
text
@a20 1
char server_port_config[MAX_CONFIG];
a50 1
  server_port_config[0] = '\0';
d70 1
a70 1
      value = strtok((char *)NULL,":\r\n");
d79 1
a79 1
	    pass = strtok((char *)NULL,":\r\n");
a95 2
	    char *port;
	    port = strtok((char *)NULL,":\r\n");
a96 1
	    printf("server port = [%s]\n", port );
a97 1
	    strncpy(server_port_config,port,MAX_CONFIG-1);
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
static *version="$Id$";
d15 1
d17 22
a38 1
void load_userlist()
d40 1
a40 1
  FILE *userfile;
d42 14
a55 1
  int cnt = 0;
d57 5
a61 4
  userfile = fopen("userlist.load","r");
  if (!userfile) {
    printf("Cannot read userlist.load\n");
    exit(1);
d64 1
a64 1
  while (fgets(line, MAX_BUFF-1, userfile) != NULL)
d66 11
a76 4
      line[strlen(line)-1] = 0;
      
      userlist[cnt] = strdup(line);
      if(userlist[cnt] == (char *)NULL)
d78 46
a123 2
	  fprintf(stderr,"memory allocation error in load_userlist()\n");
	  exit(1);
a124 3
      cnt++;
      if( cnt == (MAXUSERS - 1))
	break;
d126 39
a164 2
  fclose(userfile);
  userlist[cnt] = (char *)NULL;
d180 3
a182 1
int cnt;
@
